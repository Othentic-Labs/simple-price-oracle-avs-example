// source: disperser/disperser.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.disperser.AuthenticatedReply', null, global);
goog.exportSymbol('proto.disperser.AuthenticatedReply.PayloadCase', null, global);
goog.exportSymbol('proto.disperser.AuthenticatedRequest', null, global);
goog.exportSymbol('proto.disperser.AuthenticatedRequest.PayloadCase', null, global);
goog.exportSymbol('proto.disperser.AuthenticationData', null, global);
goog.exportSymbol('proto.disperser.BatchHeader', null, global);
goog.exportSymbol('proto.disperser.BatchMetadata', null, global);
goog.exportSymbol('proto.disperser.BlobAuthHeader', null, global);
goog.exportSymbol('proto.disperser.BlobHeader', null, global);
goog.exportSymbol('proto.disperser.BlobInfo', null, global);
goog.exportSymbol('proto.disperser.BlobQuorumParam', null, global);
goog.exportSymbol('proto.disperser.BlobStatus', null, global);
goog.exportSymbol('proto.disperser.BlobStatusReply', null, global);
goog.exportSymbol('proto.disperser.BlobStatusRequest', null, global);
goog.exportSymbol('proto.disperser.BlobVerificationProof', null, global);
goog.exportSymbol('proto.disperser.DisperseBlobReply', null, global);
goog.exportSymbol('proto.disperser.DisperseBlobRequest', null, global);
goog.exportSymbol('proto.disperser.RetrieveBlobReply', null, global);
goog.exportSymbol('proto.disperser.RetrieveBlobRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.AuthenticatedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.disperser.AuthenticatedRequest.oneofGroups_);
};
goog.inherits(proto.disperser.AuthenticatedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.AuthenticatedRequest.displayName = 'proto.disperser.AuthenticatedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.AuthenticatedReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.disperser.AuthenticatedReply.oneofGroups_);
};
goog.inherits(proto.disperser.AuthenticatedReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.AuthenticatedReply.displayName = 'proto.disperser.AuthenticatedReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobAuthHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BlobAuthHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobAuthHeader.displayName = 'proto.disperser.BlobAuthHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.AuthenticationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.AuthenticationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.AuthenticationData.displayName = 'proto.disperser.AuthenticationData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.DisperseBlobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.disperser.DisperseBlobRequest.repeatedFields_, null);
};
goog.inherits(proto.disperser.DisperseBlobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.DisperseBlobRequest.displayName = 'proto.disperser.DisperseBlobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.DisperseBlobReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.DisperseBlobReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.DisperseBlobReply.displayName = 'proto.disperser.DisperseBlobReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BlobStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobStatusRequest.displayName = 'proto.disperser.BlobStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobStatusReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BlobStatusReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobStatusReply.displayName = 'proto.disperser.BlobStatusReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.RetrieveBlobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.RetrieveBlobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.RetrieveBlobRequest.displayName = 'proto.disperser.RetrieveBlobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.RetrieveBlobReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.RetrieveBlobReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.RetrieveBlobReply.displayName = 'proto.disperser.RetrieveBlobReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BlobInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobInfo.displayName = 'proto.disperser.BlobInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.disperser.BlobHeader.repeatedFields_, null);
};
goog.inherits(proto.disperser.BlobHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobHeader.displayName = 'proto.disperser.BlobHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobQuorumParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BlobQuorumParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobQuorumParam.displayName = 'proto.disperser.BlobQuorumParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BlobVerificationProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BlobVerificationProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BlobVerificationProof.displayName = 'proto.disperser.BlobVerificationProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BatchMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BatchMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BatchMetadata.displayName = 'proto.disperser.BatchMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.disperser.BatchHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.disperser.BatchHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.disperser.BatchHeader.displayName = 'proto.disperser.BatchHeader';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.disperser.AuthenticatedRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.disperser.AuthenticatedRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  DISPERSE_REQUEST: 1,
  AUTHENTICATION_DATA: 2
};

/**
 * @return {proto.disperser.AuthenticatedRequest.PayloadCase}
 */
proto.disperser.AuthenticatedRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.disperser.AuthenticatedRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.disperser.AuthenticatedRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.AuthenticatedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.AuthenticatedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.AuthenticatedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.AuthenticatedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    disperseRequest: (f = msg.getDisperseRequest()) && proto.disperser.DisperseBlobRequest.toObject(includeInstance, f),
    authenticationData: (f = msg.getAuthenticationData()) && proto.disperser.AuthenticationData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.AuthenticatedRequest}
 */
proto.disperser.AuthenticatedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.AuthenticatedRequest;
  return proto.disperser.AuthenticatedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.AuthenticatedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.AuthenticatedRequest}
 */
proto.disperser.AuthenticatedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.disperser.DisperseBlobRequest;
      reader.readMessage(value,proto.disperser.DisperseBlobRequest.deserializeBinaryFromReader);
      msg.setDisperseRequest(value);
      break;
    case 2:
      var value = new proto.disperser.AuthenticationData;
      reader.readMessage(value,proto.disperser.AuthenticationData.deserializeBinaryFromReader);
      msg.setAuthenticationData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.AuthenticatedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.AuthenticatedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.AuthenticatedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.AuthenticatedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisperseRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.disperser.DisperseBlobRequest.serializeBinaryToWriter
    );
  }
  f = message.getAuthenticationData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.disperser.AuthenticationData.serializeBinaryToWriter
    );
  }
};


/**
 * optional DisperseBlobRequest disperse_request = 1;
 * @return {?proto.disperser.DisperseBlobRequest}
 */
proto.disperser.AuthenticatedRequest.prototype.getDisperseRequest = function() {
  return /** @type{?proto.disperser.DisperseBlobRequest} */ (
    jspb.Message.getWrapperField(this, proto.disperser.DisperseBlobRequest, 1));
};


/**
 * @param {?proto.disperser.DisperseBlobRequest|undefined} value
 * @return {!proto.disperser.AuthenticatedRequest} returns this
*/
proto.disperser.AuthenticatedRequest.prototype.setDisperseRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.disperser.AuthenticatedRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.AuthenticatedRequest} returns this
 */
proto.disperser.AuthenticatedRequest.prototype.clearDisperseRequest = function() {
  return this.setDisperseRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.AuthenticatedRequest.prototype.hasDisperseRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AuthenticationData authentication_data = 2;
 * @return {?proto.disperser.AuthenticationData}
 */
proto.disperser.AuthenticatedRequest.prototype.getAuthenticationData = function() {
  return /** @type{?proto.disperser.AuthenticationData} */ (
    jspb.Message.getWrapperField(this, proto.disperser.AuthenticationData, 2));
};


/**
 * @param {?proto.disperser.AuthenticationData|undefined} value
 * @return {!proto.disperser.AuthenticatedRequest} returns this
*/
proto.disperser.AuthenticatedRequest.prototype.setAuthenticationData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.disperser.AuthenticatedRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.AuthenticatedRequest} returns this
 */
proto.disperser.AuthenticatedRequest.prototype.clearAuthenticationData = function() {
  return this.setAuthenticationData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.AuthenticatedRequest.prototype.hasAuthenticationData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.disperser.AuthenticatedReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.disperser.AuthenticatedReply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  BLOB_AUTH_HEADER: 1,
  DISPERSE_REPLY: 2
};

/**
 * @return {proto.disperser.AuthenticatedReply.PayloadCase}
 */
proto.disperser.AuthenticatedReply.prototype.getPayloadCase = function() {
  return /** @type {proto.disperser.AuthenticatedReply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.disperser.AuthenticatedReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.AuthenticatedReply.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.AuthenticatedReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.AuthenticatedReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.AuthenticatedReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    blobAuthHeader: (f = msg.getBlobAuthHeader()) && proto.disperser.BlobAuthHeader.toObject(includeInstance, f),
    disperseReply: (f = msg.getDisperseReply()) && proto.disperser.DisperseBlobReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.AuthenticatedReply}
 */
proto.disperser.AuthenticatedReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.AuthenticatedReply;
  return proto.disperser.AuthenticatedReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.AuthenticatedReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.AuthenticatedReply}
 */
proto.disperser.AuthenticatedReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.disperser.BlobAuthHeader;
      reader.readMessage(value,proto.disperser.BlobAuthHeader.deserializeBinaryFromReader);
      msg.setBlobAuthHeader(value);
      break;
    case 2:
      var value = new proto.disperser.DisperseBlobReply;
      reader.readMessage(value,proto.disperser.DisperseBlobReply.deserializeBinaryFromReader);
      msg.setDisperseReply(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.AuthenticatedReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.AuthenticatedReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.AuthenticatedReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.AuthenticatedReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlobAuthHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.disperser.BlobAuthHeader.serializeBinaryToWriter
    );
  }
  f = message.getDisperseReply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.disperser.DisperseBlobReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlobAuthHeader blob_auth_header = 1;
 * @return {?proto.disperser.BlobAuthHeader}
 */
proto.disperser.AuthenticatedReply.prototype.getBlobAuthHeader = function() {
  return /** @type{?proto.disperser.BlobAuthHeader} */ (
    jspb.Message.getWrapperField(this, proto.disperser.BlobAuthHeader, 1));
};


/**
 * @param {?proto.disperser.BlobAuthHeader|undefined} value
 * @return {!proto.disperser.AuthenticatedReply} returns this
*/
proto.disperser.AuthenticatedReply.prototype.setBlobAuthHeader = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.disperser.AuthenticatedReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.AuthenticatedReply} returns this
 */
proto.disperser.AuthenticatedReply.prototype.clearBlobAuthHeader = function() {
  return this.setBlobAuthHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.AuthenticatedReply.prototype.hasBlobAuthHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DisperseBlobReply disperse_reply = 2;
 * @return {?proto.disperser.DisperseBlobReply}
 */
proto.disperser.AuthenticatedReply.prototype.getDisperseReply = function() {
  return /** @type{?proto.disperser.DisperseBlobReply} */ (
    jspb.Message.getWrapperField(this, proto.disperser.DisperseBlobReply, 2));
};


/**
 * @param {?proto.disperser.DisperseBlobReply|undefined} value
 * @return {!proto.disperser.AuthenticatedReply} returns this
*/
proto.disperser.AuthenticatedReply.prototype.setDisperseReply = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.disperser.AuthenticatedReply.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.AuthenticatedReply} returns this
 */
proto.disperser.AuthenticatedReply.prototype.clearDisperseReply = function() {
  return this.setDisperseReply(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.AuthenticatedReply.prototype.hasDisperseReply = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobAuthHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobAuthHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobAuthHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobAuthHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    challengeParameter: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobAuthHeader}
 */
proto.disperser.BlobAuthHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobAuthHeader;
  return proto.disperser.BlobAuthHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobAuthHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobAuthHeader}
 */
proto.disperser.BlobAuthHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChallengeParameter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobAuthHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobAuthHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobAuthHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobAuthHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChallengeParameter();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 challenge_parameter = 1;
 * @return {number}
 */
proto.disperser.BlobAuthHeader.prototype.getChallengeParameter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobAuthHeader} returns this
 */
proto.disperser.BlobAuthHeader.prototype.setChallengeParameter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.AuthenticationData.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.AuthenticationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.AuthenticationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.AuthenticationData.toObject = function(includeInstance, msg) {
  var f, obj = {
    authenticationData: msg.getAuthenticationData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.AuthenticationData}
 */
proto.disperser.AuthenticationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.AuthenticationData;
  return proto.disperser.AuthenticationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.AuthenticationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.AuthenticationData}
 */
proto.disperser.AuthenticationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthenticationData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.AuthenticationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.AuthenticationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.AuthenticationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.AuthenticationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthenticationData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes authentication_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.AuthenticationData.prototype.getAuthenticationData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes authentication_data = 1;
 * This is a type-conversion wrapper around `getAuthenticationData()`
 * @return {string}
 */
proto.disperser.AuthenticationData.prototype.getAuthenticationData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthenticationData()));
};


/**
 * optional bytes authentication_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthenticationData()`
 * @return {!Uint8Array}
 */
proto.disperser.AuthenticationData.prototype.getAuthenticationData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthenticationData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.AuthenticationData} returns this
 */
proto.disperser.AuthenticationData.prototype.setAuthenticationData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.disperser.DisperseBlobRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.DisperseBlobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.DisperseBlobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.DisperseBlobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.DisperseBlobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64(),
    customQuorumNumbersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    accountId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.DisperseBlobRequest}
 */
proto.disperser.DisperseBlobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.DisperseBlobRequest;
  return proto.disperser.DisperseBlobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.DisperseBlobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.DisperseBlobRequest}
 */
proto.disperser.DisperseBlobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCustomQuorumNumbers(values[i]);
      }
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.DisperseBlobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.DisperseBlobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.DisperseBlobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.DisperseBlobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCustomQuorumNumbersList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getAccountId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.DisperseBlobRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.disperser.DisperseBlobRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.disperser.DisperseBlobRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.DisperseBlobRequest} returns this
 */
proto.disperser.DisperseBlobRequest.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated uint32 custom_quorum_numbers = 2;
 * @return {!Array<number>}
 */
proto.disperser.DisperseBlobRequest.prototype.getCustomQuorumNumbersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.disperser.DisperseBlobRequest} returns this
 */
proto.disperser.DisperseBlobRequest.prototype.setCustomQuorumNumbersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.disperser.DisperseBlobRequest} returns this
 */
proto.disperser.DisperseBlobRequest.prototype.addCustomQuorumNumbers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.disperser.DisperseBlobRequest} returns this
 */
proto.disperser.DisperseBlobRequest.prototype.clearCustomQuorumNumbersList = function() {
  return this.setCustomQuorumNumbersList([]);
};


/**
 * optional string account_id = 3;
 * @return {string}
 */
proto.disperser.DisperseBlobRequest.prototype.getAccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.disperser.DisperseBlobRequest} returns this
 */
proto.disperser.DisperseBlobRequest.prototype.setAccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.DisperseBlobReply.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.DisperseBlobReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.DisperseBlobReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.DisperseBlobReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestId: msg.getRequestId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.DisperseBlobReply}
 */
proto.disperser.DisperseBlobReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.DisperseBlobReply;
  return proto.disperser.DisperseBlobReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.DisperseBlobReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.DisperseBlobReply}
 */
proto.disperser.DisperseBlobReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.disperser.BlobStatus} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.DisperseBlobReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.DisperseBlobReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.DisperseBlobReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.DisperseBlobReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional BlobStatus result = 1;
 * @return {!proto.disperser.BlobStatus}
 */
proto.disperser.DisperseBlobReply.prototype.getResult = function() {
  return /** @type {!proto.disperser.BlobStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.disperser.BlobStatus} value
 * @return {!proto.disperser.DisperseBlobReply} returns this
 */
proto.disperser.DisperseBlobReply.prototype.setResult = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes request_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.DisperseBlobReply.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes request_id = 2;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.disperser.DisperseBlobReply.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.disperser.DisperseBlobReply.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.DisperseBlobReply} returns this
 */
proto.disperser.DisperseBlobReply.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobStatusRequest}
 */
proto.disperser.BlobStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobStatusRequest;
  return proto.disperser.BlobStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobStatusRequest}
 */
proto.disperser.BlobStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BlobStatusRequest.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.disperser.BlobStatusRequest.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.disperser.BlobStatusRequest.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BlobStatusRequest} returns this
 */
proto.disperser.BlobStatusRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobStatusReply.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobStatusReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobStatusReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobStatusReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: (f = msg.getInfo()) && proto.disperser.BlobInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobStatusReply}
 */
proto.disperser.BlobStatusReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobStatusReply;
  return proto.disperser.BlobStatusReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobStatusReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobStatusReply}
 */
proto.disperser.BlobStatusReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.disperser.BlobStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.disperser.BlobInfo;
      reader.readMessage(value,proto.disperser.BlobInfo.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobStatusReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobStatusReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobStatusReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobStatusReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.disperser.BlobInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlobStatus status = 1;
 * @return {!proto.disperser.BlobStatus}
 */
proto.disperser.BlobStatusReply.prototype.getStatus = function() {
  return /** @type {!proto.disperser.BlobStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.disperser.BlobStatus} value
 * @return {!proto.disperser.BlobStatusReply} returns this
 */
proto.disperser.BlobStatusReply.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional BlobInfo info = 2;
 * @return {?proto.disperser.BlobInfo}
 */
proto.disperser.BlobStatusReply.prototype.getInfo = function() {
  return /** @type{?proto.disperser.BlobInfo} */ (
    jspb.Message.getWrapperField(this, proto.disperser.BlobInfo, 2));
};


/**
 * @param {?proto.disperser.BlobInfo|undefined} value
 * @return {!proto.disperser.BlobStatusReply} returns this
*/
proto.disperser.BlobStatusReply.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.BlobStatusReply} returns this
 */
proto.disperser.BlobStatusReply.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.BlobStatusReply.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.RetrieveBlobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.RetrieveBlobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.RetrieveBlobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.RetrieveBlobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchHeaderHash: msg.getBatchHeaderHash_asB64(),
    blobIndex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.RetrieveBlobRequest}
 */
proto.disperser.RetrieveBlobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.RetrieveBlobRequest;
  return proto.disperser.RetrieveBlobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.RetrieveBlobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.RetrieveBlobRequest}
 */
proto.disperser.RetrieveBlobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBatchHeaderHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlobIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.RetrieveBlobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.RetrieveBlobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.RetrieveBlobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.RetrieveBlobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchHeaderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBlobIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes batch_header_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.RetrieveBlobRequest.prototype.getBatchHeaderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes batch_header_hash = 1;
 * This is a type-conversion wrapper around `getBatchHeaderHash()`
 * @return {string}
 */
proto.disperser.RetrieveBlobRequest.prototype.getBatchHeaderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBatchHeaderHash()));
};


/**
 * optional bytes batch_header_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBatchHeaderHash()`
 * @return {!Uint8Array}
 */
proto.disperser.RetrieveBlobRequest.prototype.getBatchHeaderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBatchHeaderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.RetrieveBlobRequest} returns this
 */
proto.disperser.RetrieveBlobRequest.prototype.setBatchHeaderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 blob_index = 2;
 * @return {number}
 */
proto.disperser.RetrieveBlobRequest.prototype.getBlobIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.RetrieveBlobRequest} returns this
 */
proto.disperser.RetrieveBlobRequest.prototype.setBlobIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.RetrieveBlobReply.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.RetrieveBlobReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.RetrieveBlobReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.RetrieveBlobReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.RetrieveBlobReply}
 */
proto.disperser.RetrieveBlobReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.RetrieveBlobReply;
  return proto.disperser.RetrieveBlobReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.RetrieveBlobReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.RetrieveBlobReply}
 */
proto.disperser.RetrieveBlobReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.RetrieveBlobReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.RetrieveBlobReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.RetrieveBlobReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.RetrieveBlobReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.RetrieveBlobReply.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes data = 1;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.disperser.RetrieveBlobReply.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.disperser.RetrieveBlobReply.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.RetrieveBlobReply} returns this
 */
proto.disperser.RetrieveBlobReply.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blobHeader: (f = msg.getBlobHeader()) && proto.disperser.BlobHeader.toObject(includeInstance, f),
    blobVerificationProof: (f = msg.getBlobVerificationProof()) && proto.disperser.BlobVerificationProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobInfo}
 */
proto.disperser.BlobInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobInfo;
  return proto.disperser.BlobInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobInfo}
 */
proto.disperser.BlobInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.disperser.BlobHeader;
      reader.readMessage(value,proto.disperser.BlobHeader.deserializeBinaryFromReader);
      msg.setBlobHeader(value);
      break;
    case 2:
      var value = new proto.disperser.BlobVerificationProof;
      reader.readMessage(value,proto.disperser.BlobVerificationProof.deserializeBinaryFromReader);
      msg.setBlobVerificationProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlobHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.disperser.BlobHeader.serializeBinaryToWriter
    );
  }
  f = message.getBlobVerificationProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.disperser.BlobVerificationProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional BlobHeader blob_header = 1;
 * @return {?proto.disperser.BlobHeader}
 */
proto.disperser.BlobInfo.prototype.getBlobHeader = function() {
  return /** @type{?proto.disperser.BlobHeader} */ (
    jspb.Message.getWrapperField(this, proto.disperser.BlobHeader, 1));
};


/**
 * @param {?proto.disperser.BlobHeader|undefined} value
 * @return {!proto.disperser.BlobInfo} returns this
*/
proto.disperser.BlobInfo.prototype.setBlobHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.BlobInfo} returns this
 */
proto.disperser.BlobInfo.prototype.clearBlobHeader = function() {
  return this.setBlobHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.BlobInfo.prototype.hasBlobHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BlobVerificationProof blob_verification_proof = 2;
 * @return {?proto.disperser.BlobVerificationProof}
 */
proto.disperser.BlobInfo.prototype.getBlobVerificationProof = function() {
  return /** @type{?proto.disperser.BlobVerificationProof} */ (
    jspb.Message.getWrapperField(this, proto.disperser.BlobVerificationProof, 2));
};


/**
 * @param {?proto.disperser.BlobVerificationProof|undefined} value
 * @return {!proto.disperser.BlobInfo} returns this
*/
proto.disperser.BlobInfo.prototype.setBlobVerificationProof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.BlobInfo} returns this
 */
proto.disperser.BlobInfo.prototype.clearBlobVerificationProof = function() {
  return this.setBlobVerificationProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.BlobInfo.prototype.hasBlobVerificationProof = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.disperser.BlobHeader.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    commitment: (f = msg.getCommitment()) && common_common_pb.G1Commitment.toObject(includeInstance, f),
    dataLength: jspb.Message.getFieldWithDefault(msg, 2, 0),
    blobQuorumParamsList: jspb.Message.toObjectList(msg.getBlobQuorumParamsList(),
    proto.disperser.BlobQuorumParam.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobHeader}
 */
proto.disperser.BlobHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobHeader;
  return proto.disperser.BlobHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobHeader}
 */
proto.disperser.BlobHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.G1Commitment;
      reader.readMessage(value,common_common_pb.G1Commitment.deserializeBinaryFromReader);
      msg.setCommitment(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDataLength(value);
      break;
    case 3:
      var value = new proto.disperser.BlobQuorumParam;
      reader.readMessage(value,proto.disperser.BlobQuorumParam.deserializeBinaryFromReader);
      msg.addBlobQuorumParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommitment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_common_pb.G1Commitment.serializeBinaryToWriter
    );
  }
  f = message.getDataLength();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBlobQuorumParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.disperser.BlobQuorumParam.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.G1Commitment commitment = 1;
 * @return {?proto.common.G1Commitment}
 */
proto.disperser.BlobHeader.prototype.getCommitment = function() {
  return /** @type{?proto.common.G1Commitment} */ (
    jspb.Message.getWrapperField(this, common_common_pb.G1Commitment, 1));
};


/**
 * @param {?proto.common.G1Commitment|undefined} value
 * @return {!proto.disperser.BlobHeader} returns this
*/
proto.disperser.BlobHeader.prototype.setCommitment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.BlobHeader} returns this
 */
proto.disperser.BlobHeader.prototype.clearCommitment = function() {
  return this.setCommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.BlobHeader.prototype.hasCommitment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 data_length = 2;
 * @return {number}
 */
proto.disperser.BlobHeader.prototype.getDataLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobHeader} returns this
 */
proto.disperser.BlobHeader.prototype.setDataLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated BlobQuorumParam blob_quorum_params = 3;
 * @return {!Array<!proto.disperser.BlobQuorumParam>}
 */
proto.disperser.BlobHeader.prototype.getBlobQuorumParamsList = function() {
  return /** @type{!Array<!proto.disperser.BlobQuorumParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.disperser.BlobQuorumParam, 3));
};


/**
 * @param {!Array<!proto.disperser.BlobQuorumParam>} value
 * @return {!proto.disperser.BlobHeader} returns this
*/
proto.disperser.BlobHeader.prototype.setBlobQuorumParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.disperser.BlobQuorumParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.disperser.BlobQuorumParam}
 */
proto.disperser.BlobHeader.prototype.addBlobQuorumParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.disperser.BlobQuorumParam, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.disperser.BlobHeader} returns this
 */
proto.disperser.BlobHeader.prototype.clearBlobQuorumParamsList = function() {
  return this.setBlobQuorumParamsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobQuorumParam.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobQuorumParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobQuorumParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobQuorumParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    quorumNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
    adversaryThresholdPercentage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    confirmationThresholdPercentage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chunkLength: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobQuorumParam}
 */
proto.disperser.BlobQuorumParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobQuorumParam;
  return proto.disperser.BlobQuorumParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobQuorumParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobQuorumParam}
 */
proto.disperser.BlobQuorumParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuorumNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAdversaryThresholdPercentage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfirmationThresholdPercentage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChunkLength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobQuorumParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobQuorumParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobQuorumParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobQuorumParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuorumNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAdversaryThresholdPercentage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getConfirmationThresholdPercentage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getChunkLength();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 quorum_number = 1;
 * @return {number}
 */
proto.disperser.BlobQuorumParam.prototype.getQuorumNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobQuorumParam} returns this
 */
proto.disperser.BlobQuorumParam.prototype.setQuorumNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 adversary_threshold_percentage = 2;
 * @return {number}
 */
proto.disperser.BlobQuorumParam.prototype.getAdversaryThresholdPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobQuorumParam} returns this
 */
proto.disperser.BlobQuorumParam.prototype.setAdversaryThresholdPercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 confirmation_threshold_percentage = 3;
 * @return {number}
 */
proto.disperser.BlobQuorumParam.prototype.getConfirmationThresholdPercentage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobQuorumParam} returns this
 */
proto.disperser.BlobQuorumParam.prototype.setConfirmationThresholdPercentage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 chunk_length = 4;
 * @return {number}
 */
proto.disperser.BlobQuorumParam.prototype.getChunkLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobQuorumParam} returns this
 */
proto.disperser.BlobQuorumParam.prototype.setChunkLength = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BlobVerificationProof.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BlobVerificationProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BlobVerificationProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobVerificationProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blobIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    batchMetadata: (f = msg.getBatchMetadata()) && proto.disperser.BatchMetadata.toObject(includeInstance, f),
    inclusionProof: msg.getInclusionProof_asB64(),
    quorumIndexes: msg.getQuorumIndexes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BlobVerificationProof}
 */
proto.disperser.BlobVerificationProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BlobVerificationProof;
  return proto.disperser.BlobVerificationProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BlobVerificationProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BlobVerificationProof}
 */
proto.disperser.BlobVerificationProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBatchId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlobIndex(value);
      break;
    case 3:
      var value = new proto.disperser.BatchMetadata;
      reader.readMessage(value,proto.disperser.BatchMetadata.deserializeBinaryFromReader);
      msg.setBatchMetadata(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInclusionProof(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQuorumIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BlobVerificationProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BlobVerificationProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BlobVerificationProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BlobVerificationProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlobIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBatchMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.disperser.BatchMetadata.serializeBinaryToWriter
    );
  }
  f = message.getInclusionProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getQuorumIndexes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint32 batch_id = 1;
 * @return {number}
 */
proto.disperser.BlobVerificationProof.prototype.getBatchId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobVerificationProof} returns this
 */
proto.disperser.BlobVerificationProof.prototype.setBatchId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 blob_index = 2;
 * @return {number}
 */
proto.disperser.BlobVerificationProof.prototype.getBlobIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BlobVerificationProof} returns this
 */
proto.disperser.BlobVerificationProof.prototype.setBlobIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional BatchMetadata batch_metadata = 3;
 * @return {?proto.disperser.BatchMetadata}
 */
proto.disperser.BlobVerificationProof.prototype.getBatchMetadata = function() {
  return /** @type{?proto.disperser.BatchMetadata} */ (
    jspb.Message.getWrapperField(this, proto.disperser.BatchMetadata, 3));
};


/**
 * @param {?proto.disperser.BatchMetadata|undefined} value
 * @return {!proto.disperser.BlobVerificationProof} returns this
*/
proto.disperser.BlobVerificationProof.prototype.setBatchMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.BlobVerificationProof} returns this
 */
proto.disperser.BlobVerificationProof.prototype.clearBatchMetadata = function() {
  return this.setBatchMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.BlobVerificationProof.prototype.hasBatchMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes inclusion_proof = 4;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BlobVerificationProof.prototype.getInclusionProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes inclusion_proof = 4;
 * This is a type-conversion wrapper around `getInclusionProof()`
 * @return {string}
 */
proto.disperser.BlobVerificationProof.prototype.getInclusionProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInclusionProof()));
};


/**
 * optional bytes inclusion_proof = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInclusionProof()`
 * @return {!Uint8Array}
 */
proto.disperser.BlobVerificationProof.prototype.getInclusionProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInclusionProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BlobVerificationProof} returns this
 */
proto.disperser.BlobVerificationProof.prototype.setInclusionProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes quorum_indexes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BlobVerificationProof.prototype.getQuorumIndexes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes quorum_indexes = 5;
 * This is a type-conversion wrapper around `getQuorumIndexes()`
 * @return {string}
 */
proto.disperser.BlobVerificationProof.prototype.getQuorumIndexes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQuorumIndexes()));
};


/**
 * optional bytes quorum_indexes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuorumIndexes()`
 * @return {!Uint8Array}
 */
proto.disperser.BlobVerificationProof.prototype.getQuorumIndexes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQuorumIndexes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BlobVerificationProof} returns this
 */
proto.disperser.BlobVerificationProof.prototype.setQuorumIndexes = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BatchMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BatchMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BatchMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BatchMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchHeader: (f = msg.getBatchHeader()) && proto.disperser.BatchHeader.toObject(includeInstance, f),
    signatoryRecordHash: msg.getSignatoryRecordHash_asB64(),
    fee: msg.getFee_asB64(),
    confirmationBlockNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    batchHeaderHash: msg.getBatchHeaderHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BatchMetadata}
 */
proto.disperser.BatchMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BatchMetadata;
  return proto.disperser.BatchMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BatchMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BatchMetadata}
 */
proto.disperser.BatchMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.disperser.BatchHeader;
      reader.readMessage(value,proto.disperser.BatchHeader.deserializeBinaryFromReader);
      msg.setBatchHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatoryRecordHash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFee(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConfirmationBlockNumber(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBatchHeaderHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BatchMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BatchMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BatchMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BatchMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.disperser.BatchHeader.serializeBinaryToWriter
    );
  }
  f = message.getSignatoryRecordHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getFee_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getConfirmationBlockNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getBatchHeaderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional BatchHeader batch_header = 1;
 * @return {?proto.disperser.BatchHeader}
 */
proto.disperser.BatchMetadata.prototype.getBatchHeader = function() {
  return /** @type{?proto.disperser.BatchHeader} */ (
    jspb.Message.getWrapperField(this, proto.disperser.BatchHeader, 1));
};


/**
 * @param {?proto.disperser.BatchHeader|undefined} value
 * @return {!proto.disperser.BatchMetadata} returns this
*/
proto.disperser.BatchMetadata.prototype.setBatchHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.disperser.BatchMetadata} returns this
 */
proto.disperser.BatchMetadata.prototype.clearBatchHeader = function() {
  return this.setBatchHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.disperser.BatchMetadata.prototype.hasBatchHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signatory_record_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BatchMetadata.prototype.getSignatoryRecordHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signatory_record_hash = 2;
 * This is a type-conversion wrapper around `getSignatoryRecordHash()`
 * @return {string}
 */
proto.disperser.BatchMetadata.prototype.getSignatoryRecordHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatoryRecordHash()));
};


/**
 * optional bytes signatory_record_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatoryRecordHash()`
 * @return {!Uint8Array}
 */
proto.disperser.BatchMetadata.prototype.getSignatoryRecordHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatoryRecordHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BatchMetadata} returns this
 */
proto.disperser.BatchMetadata.prototype.setSignatoryRecordHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes fee = 3;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BatchMetadata.prototype.getFee = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes fee = 3;
 * This is a type-conversion wrapper around `getFee()`
 * @return {string}
 */
proto.disperser.BatchMetadata.prototype.getFee_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFee()));
};


/**
 * optional bytes fee = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFee()`
 * @return {!Uint8Array}
 */
proto.disperser.BatchMetadata.prototype.getFee_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFee()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BatchMetadata} returns this
 */
proto.disperser.BatchMetadata.prototype.setFee = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 confirmation_block_number = 4;
 * @return {number}
 */
proto.disperser.BatchMetadata.prototype.getConfirmationBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BatchMetadata} returns this
 */
proto.disperser.BatchMetadata.prototype.setConfirmationBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes batch_header_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BatchMetadata.prototype.getBatchHeaderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes batch_header_hash = 5;
 * This is a type-conversion wrapper around `getBatchHeaderHash()`
 * @return {string}
 */
proto.disperser.BatchMetadata.prototype.getBatchHeaderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBatchHeaderHash()));
};


/**
 * optional bytes batch_header_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBatchHeaderHash()`
 * @return {!Uint8Array}
 */
proto.disperser.BatchMetadata.prototype.getBatchHeaderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBatchHeaderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BatchMetadata} returns this
 */
proto.disperser.BatchMetadata.prototype.setBatchHeaderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.disperser.BatchHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.disperser.BatchHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.disperser.BatchHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BatchHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchRoot: msg.getBatchRoot_asB64(),
    quorumNumbers: msg.getQuorumNumbers_asB64(),
    quorumSignedPercentages: msg.getQuorumSignedPercentages_asB64(),
    referenceBlockNumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.disperser.BatchHeader}
 */
proto.disperser.BatchHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.disperser.BatchHeader;
  return proto.disperser.BatchHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.disperser.BatchHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.disperser.BatchHeader}
 */
proto.disperser.BatchHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBatchRoot(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQuorumNumbers(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setQuorumSignedPercentages(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReferenceBlockNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.disperser.BatchHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.disperser.BatchHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.disperser.BatchHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.disperser.BatchHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getQuorumNumbers_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getQuorumSignedPercentages_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getReferenceBlockNumber();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes batch_root = 1;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BatchHeader.prototype.getBatchRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes batch_root = 1;
 * This is a type-conversion wrapper around `getBatchRoot()`
 * @return {string}
 */
proto.disperser.BatchHeader.prototype.getBatchRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBatchRoot()));
};


/**
 * optional bytes batch_root = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBatchRoot()`
 * @return {!Uint8Array}
 */
proto.disperser.BatchHeader.prototype.getBatchRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBatchRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BatchHeader} returns this
 */
proto.disperser.BatchHeader.prototype.setBatchRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes quorum_numbers = 2;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BatchHeader.prototype.getQuorumNumbers = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes quorum_numbers = 2;
 * This is a type-conversion wrapper around `getQuorumNumbers()`
 * @return {string}
 */
proto.disperser.BatchHeader.prototype.getQuorumNumbers_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQuorumNumbers()));
};


/**
 * optional bytes quorum_numbers = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuorumNumbers()`
 * @return {!Uint8Array}
 */
proto.disperser.BatchHeader.prototype.getQuorumNumbers_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQuorumNumbers()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BatchHeader} returns this
 */
proto.disperser.BatchHeader.prototype.setQuorumNumbers = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes quorum_signed_percentages = 3;
 * @return {!(string|Uint8Array)}
 */
proto.disperser.BatchHeader.prototype.getQuorumSignedPercentages = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes quorum_signed_percentages = 3;
 * This is a type-conversion wrapper around `getQuorumSignedPercentages()`
 * @return {string}
 */
proto.disperser.BatchHeader.prototype.getQuorumSignedPercentages_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getQuorumSignedPercentages()));
};


/**
 * optional bytes quorum_signed_percentages = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getQuorumSignedPercentages()`
 * @return {!Uint8Array}
 */
proto.disperser.BatchHeader.prototype.getQuorumSignedPercentages_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getQuorumSignedPercentages()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.disperser.BatchHeader} returns this
 */
proto.disperser.BatchHeader.prototype.setQuorumSignedPercentages = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 reference_block_number = 4;
 * @return {number}
 */
proto.disperser.BatchHeader.prototype.getReferenceBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.disperser.BatchHeader} returns this
 */
proto.disperser.BatchHeader.prototype.setReferenceBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.disperser.BlobStatus = {
  UNKNOWN: 0,
  PROCESSING: 1,
  CONFIRMED: 2,
  FAILED: 3,
  FINALIZED: 4,
  INSUFFICIENT_SIGNATURES: 5,
  DISPERSING: 6
};

goog.object.extend(exports, proto.disperser);
