x-otnode: &otnode
  env_file:
    - .env
  build:
    context: .
    dockerfile: ./Dockerfile
services:
  aggregator:
    <<: *otnode
    command: [
      "run",
      "aggregator",
      "--json-rpc",
      # "--internal-tasks"
    ]
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY_AGGREGATOR}
      - L1_CHAIN=${L1_CHAIN}
      - L2_CHAIN=${L2_CHAIN}
    ports:
      - "8545:8545"
      - "9876:9876"
    networks:
      p2p:
        ipv4_address: 10.8.0.69
  attester-1:
    <<: *otnode
    command: [
      "run",
      "attester",
      "/ip4/10.8.0.69/tcp/9876/p2p/${OTHENTIC_BOOTSTRAP_ID}",
      "--avs-webapi",
      "http://10.8.0.42",
    ]
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY_ATTESTER1}
      - L1_CHAIN=${L1_CHAIN}
      - L2_CHAIN=${L2_CHAIN}
    depends_on:
      aggregator:
        condition: service_started
    networks:
      p2p:
        ipv4_address: 10.8.0.2
  attester-2:
    <<: *otnode
    command: [
      "run",
      "attester",
      "/ip4/10.8.0.69/tcp/9876/p2p/${OTHENTIC_BOOTSTRAP_ID}",
      "--avs-webapi",
      "http://10.8.0.42",
    ]
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY_ATTESTER2}
      - L1_CHAIN=${L1_CHAIN}
      - L2_CHAIN=${L2_CHAIN}
    depends_on:
      aggregator:
        condition: service_started
    networks:
      p2p:
        ipv4_address: 10.8.0.3
  attester-3:
    <<: *otnode
    command: [
      "run",
      "attester",
      "/ip4/10.8.0.69/tcp/9876/p2p/${OTHENTIC_BOOTSTRAP_ID}",
      "--avs-webapi",
      "http://10.8.0.42",
    ]
    environment:
      - PRIVATE_KEY=${PRIVATE_KEY_ATTESTER3}
      - L1_CHAIN=${L1_CHAIN}
      - L2_CHAIN=${L2_CHAIN}
    depends_on:
      aggregator:
        condition: service_started
    networks:
      p2p:
        ipv4_address: 10.8.0.4
  validation-service:
    build:
      context: ./Validation_Service
      dockerfile: ./Dockerfile
    env_file:
      - .env
    networks:
      p2p:
        ipv4_address: 10.8.0.42
  execution-service:
    build:
      context: ./Execution_Service
      dockerfile: ./Dockerfile
    environment:
      - OTHENTIC_CLIENT_RPC_ADDRESS=http://10.8.0.69:8545
      - PRIVATE_KEY=${PRIVATE_KEY_PERFORMER}
      - TEE_KYC_SERVER_URL=http://10.8.0.200:8000/api/kyc
    env_file:
      - .env
    ports:
      - "4003:4003"
    networks:
      p2p:
        ipv4_address: 10.8.0.101
  kyc-avs:
    image: kyc-avs  # This should match the name of your locally built image
    container_name: kyc-avs
    environment:
      - SECRET_AI_API_KEY=${SECRET_AI_API_KEY}
    ports:
      - "8000:8000"
    networks:
      p2p:
        ipv4_address: 10.8.0.200

networks:
  p2p:
    driver: bridge
    ipam:
     config:
       - subnet: 10.8.0.0/16
         gateway: 10.8.0.1
